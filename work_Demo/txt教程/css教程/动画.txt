    
    todo:  animate 动画效果：

        注意：定义动画时，必须定义动画的名称和动画的持续时间。如果省略持续时间，动画将无法运行，因为默认值是0。
        
        （1） animation-name:设置动画的名字（自定义的）

        （2） animation-duration:动画的持续时间

        （3） animation-delay:动画的延迟时间，定义动画什么时候开始。
                单位可以是秒（s）或毫秒（ms）。
                单位可以是负值，-2s表示动画立马开始，但跳过 2 秒进入动画，即前2秒的动画不执行，直接跳过前2秒进入动画。

        （4） animatio-iteration-count：动画的重复次数，
                默认值是1，
                infinite无限次数

        （5）  animation-timing-function:动画的运动形式
                    值	说明
                    linear	动画从头到尾的速度是相同的。
                    ease	默认。动画以低速开始，然后加快，在结束前变慢。
                    ease-in	动画以低速开始。
                    ease-out	动画以低速结束。
                    ease-in-out	动画以低速开始和结束。
                    cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。
                    step-start	在变化过程中，都是以下一帧的显示效果来填充间隔动画
                    step-end	在变化过程中，都是以上一帧的显示效果来填充间隔动画
                    steps()	可以传入两个参数，第一个是一个大于0的整数，他是将间隔动画等分成指定数目的小间隔动画，然后根据第二个参数来决定显示效果。第二个参数设置后其实和step-start，step-end同义，在分成的小间隔动画中判断显示效果。


       （6）   animation-direction：定义是否循环交替反向播放动画。
            值	说明
            normal	默认值。动画按正常播放。
            reverse	动画反向播放。
        @    alternate	动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。
            alternate-reverse	动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。
            initial	设置该属性为它的默认值。
            inherit	从父元素继承该属性。

               如果动画被设置为只播放一次，该属性将不起作用。
                 动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性可以重写该行为。

       （7）    animation-fill-mode：规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。
            值	说明
            none	默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。
            forwards	在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。
            backwards	动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 “normal” 或 “alternate” 时）或 to 关键帧中的值（当 animation-direction 为 “reverse” 或 “alternate-reverse” 时）。
            both	动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。
            initial	设置该属性为它的默认值。
            inherit	从父元素继承该属性。

            默认情况下，CSS 动画在第一个关键帧播放完之前不会影响元素，在最后一个关键帧完成后停止影响元素。animation-fill-mode 属性可重写该行为。
            forwads表示让动画停留在结束状态，即停留在最后一帧

            backwords：
                当 animation-direction 为 “normal” 或 “alternate” 时，回到第一帧。
                当 animation-direction 为 “reverse” 或 “alternate-reverse” 时，停留在最后一帧。

        （8）   animation-play-state：指定动画是否正在运行或已暂停。
            值	说明
           #   paused	指定暂停动画。
            running	指定正在运行的动画。



          todo:  keyframes：定义动画规则，关键帧。

                值	说明
              （1）  animationname	必需的。定义animation的名称。
              （2）   keyframes-selector	必需的。动画持续时间的百分比。
              （3）  css-styles	必需的。一个或多个合法的CSS样式属性。

                @keyframes myAnim{
                    from { background: #f00; }
                    50% { background: #0f0; }
                    to { background: yellowgreen; }
                }

                @keyframes myAnim{
                    0% { background: #f00; }
                    50% { background: #0f0; }
                    100% { background: yellowgreen; }
                }

                可以将多个状态写在一行。

                    @keyframes myAnim{
                        0%，100% { background: #f00; }
                        50% { background: #0f0; 
                    }


        IE 10和Firefox（>= 16）支持没有前缀的animation，
        firefox（<16）使用-moz-前缀，因为现在firefox的版本也都不低，所以firefox都直接使用没有前缀的animation。
        而chrome，safari，opera不支持，所以必须使用webkit前缀。


       #div{
	        animation:myAnim 1s;
	        -webkit-animation:myAnim 1s;
            }
        @keyframes myAnim{
            0% { background: #f00; }
            50% { background: #0f0; }
            100% { background: yellowgreen; }
            }
        @-webkit-keyframes myAnim{
            0% { background: #f00; }
            50% { background: #0f0; }
            100% { background: yellowgreen; }
            }




todo:   transition 过渡效果：

    （1）   transition是网页上的过渡动画，变化的逐渐过渡效果，简称过渡动画！
        transition 属性是一个简写属性，用于设置四个过渡属性：
            分别是transition-property，transition-duration，transition-timing-function，transition-delay

    （2）   transition-property  --规定设置过渡效果的 CSS 属性的名称。
            none	没有属性会获得过渡效果。
        @    all	所有属性都将获得过渡效果
            property	定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔。
    （3）    transition-duration    --规定完成过渡效果需要多少秒或毫秒。
            提示：请始终设置 transition-duration 属性，否则时长为 0，就不会产生过渡效果。
            time   	规定完成过渡效果需要花费的时间（以秒或毫秒计）。
            默认值是 0，意味着不会有效果。
        !  注意，请始终设置transition-duration，否则没有动画效果。
    （4）    transition-timing-function    --规定速度效果的速度曲线。
        @    linear	规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。
            ease	规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。
            ease-in	规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。
            ease-out	规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。
            ease-in-out	规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）
            cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。推荐个有意思的链接，贝塞尔曲线链接
     （5）   transition-delay --定义过渡效果何时开始。
             time	规定在过渡效果开始之前需要等待的时间，以秒或毫秒计。

        transition: all 0.2s linear;
        第一个参数的作用是设置元素的哪些属性过渡，
            all表示全部过渡，width代表属性宽度过渡，其他不过渡，其他属性也一样。
        第二个属性设置过渡需要的时长，单位s不能省略。
        第三个属性设置过渡延迟多少秒执行，单位s不能省略。
        hover 设置鼠标移到某一元素时状态。
        省略了一个属性，第四个属性设置延迟变化，省略默认为0，即没有延迟变化。
        
        transition 这个属性既可以添加在元素默认状态，也可以添加在鼠标上移状态即添加在hover标签内，
            区别就是第二种做法在鼠标离开时候不会发生过渡变化。

    
  todo:  transform 变形效果：

        transform三大属性rotate、scale、translate

      （1）  rotate 旋转，
             transform: rotate(45deg);
            只有一个参数“角度”，单位deg为度的意思，
            正数为顺时针旋转，
            负数为逆时针旋转，
        
        

     （2）   scale 缩放，一共两个参数。
            transform:scale(1.2);
            transform:scale(0.8,2);
            scale(数值)定义倍数缩放，>1放大，<1缩小
            scaleX()通过x轴定义，仅水平方向缩放
            scaleY()通过y轴定义，仅垂直方向缩放
            scaleZ()通过z轴定义，定义3d缩放
            一个参数时：表示水平和垂直同时缩放该倍率
            两个参数时：第一个参数指定水平方向的缩放倍率，第二个参数指定垂直方向的缩放倍率。
        
      （3）  skew 倾斜，一共两个参数。
            transform: skew(30deg);
            transform: skew(30deg, 30deg);
            一个参数时：表示水平方向的倾斜角度；
            两个参数时：第一个参数表示水平方向的倾斜角度，第二个参数表示垂直方向的倾斜角度。

        

     （4）  translate 参数表示移动距离，单位px，
            transform: translate(45px)  或者 transform: skew(45px, 150px);
             一个参数时：表示水平方向的移动距离；
            两个参数时：第一个参数表示水平方向的移动距离，第二个参数表示垂直方向的移动距离。

     （5）    transform-origin 基准点,共两个参数，表示相对左上角原点的距离，单位px，
            在使用transform方法进行文字或图像的变形时，是以元素的中心点为基准点进行的。使用transform-origin属性，可以改变变形的基准点。
            用法：transform-origin: 10px 10px;
            第一个参数表示相对左上角原点水平方向的距离，
            第二个参数表示相对左上角原点垂直方向的距离；
            两个参数除了可以设置为具体的像素值，
            其中第一个参数可以指定为left、center、right，
            第二个参数可以指定为top、center、bottom。

        多方法组合变形
            上面我们介绍了使用transform对元素进行旋转、缩放、倾斜、移动的方法，这里讲介绍综合使用这几个方法来对一个元素进行多重变形。
            用法：transform: rotate(45deg) scale(0.5) skew(30deg, 30deg) translate(100px, 100px);
            这四种变形方法顺序可以随意，但不同的顺序导致变形结果不同，原因是变形的顺序是从左到右依次进行，
            这个用法中的执行顺序为1.rotate  2.scalse  3.skew  4.translate
            

    todo:   轮播图

        轮播图，简单说，就是外面有一个窗口，固定宽高，中间是一堆图片组成的带，然后给这个带动画效果来实现移动，
            当每个图片经过窗口就会被我们看见，而其他图片都被隐藏掉了，这就是轮播图